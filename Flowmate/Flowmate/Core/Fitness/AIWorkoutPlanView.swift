//
//  AIWorkoutPlanView.swift
//  Flowmate
//
//  Created on 2025-01-13
//

import SwiftUI
import Foundation

struct AIWorkoutPlanView: View {
    let workout: WorkoutPlanResponse
    @EnvironmentObject var themeProvider: ThemeProvider
    @Environment(\.dismiss) private var dismiss
    @State private var completedExercises: Set<String> = []
    @State private var showShareSheet = false
    
    var body: some View {
        NavigationStack {
            ScrollView {
                VStack(spacing: 24) {
                    // Header
                    workoutHeader
                    
                    // Workout Overview
                    workoutOverview
                    
                    // AI Notes (only if available)
                    if !workout.aiNotes.isEmpty {
                        aiNotesSection
                    }
                    
                    // Exercises
                    exercisesList
                    
                    // Mark as Completed Button
                    markCompletedButton
                    
                    // Actions are available via the toolbar (Share/Close)
                }
                .padding(.bottom, 100)
            }
            .background(ThemedBackground().environmentObject(themeProvider))
            .navigationTitle("AI Workout")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .topBarLeading) {
                    Button("Close") {
                        dismiss()
                    }
                    .foregroundColor(themeProvider.theme.accent)
                }
                
                ToolbarItem(placement: .topBarTrailing) {
                    Button {
                        showShareSheet = true
                    } label: {
                        Image(systemName: "square.and.arrow.up")
                            .foregroundColor(themeProvider.theme.accent)
                    }
                }
            }
        }
        .sheet(isPresented: $showShareSheet) {
            ShareSheet(items: [generateWorkoutText()])
        }
        .onAppear {
            print("🔥 DEBUG: AIWorkoutPlanView appeared with workout id: \(workout.id), title: \(workout.title)")
        }
    }
    
    // MARK: - Workout Header
    private var workoutHeader: some View {
        VStack(spacing: 16) {
            // AI Badge
            HStack {
                Spacer()
                
                HStack(spacing: 6) {
                    Image(systemName: "sparkles")
                        .font(.system(size: 12, weight: .medium))
                    Text("Generated by Grok AI")
                        .font(.system(size: 12, weight: .semibold))
                }
                .foregroundColor(themeProvider.theme.accent)
                .padding(.horizontal, 12)
                .padding(.vertical, 6)
                .background(
                    Capsule()
                        .fill(themeProvider.theme.accent.opacity(0.1))
                        .overlay(
                            Capsule()
                                .stroke(themeProvider.theme.accent.opacity(0.3), lineWidth: 1)
                        )
                )
                
                Spacer()
            }
            
            // Title and Details
            VStack(spacing: 12) {
                Text(workout.displayTitle)
                    .font(.system(size: 32, weight: .bold, design: .rounded))
                    .foregroundColor(themeProvider.theme.textPrimary)
                    .multilineTextAlignment(.center)
                
                Text(markdown(workout.displayDescription))
                    .font(.system(size: 16, weight: .medium))
                    .foregroundColor(themeProvider.theme.textSecondary)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal)
                
                // Muscle Groups
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack(spacing: 8) {
                        ForEach(workout.target_muscle_groups, id: \.self) { group in
                            HStack(spacing: 4) {
                                Image(systemName: muscleGroupIcon(group))
                                    .font(.system(size: 12, weight: .medium))
                                Text(group.replacingOccurrences(of: "_", with: " ").capitalized)
                                    .font(.system(size: 12, weight: .semibold))
                            }
                            .foregroundColor(.white)
                            .padding(.horizontal, 10)
                            .padding(.vertical, 6)
                            .background(
                                Capsule()
                                    .fill(
                                        LinearGradient(
                                            colors: [themeProvider.theme.accent, themeProvider.theme.accent.opacity(0.8)],
                                            startPoint: .leading,
                                            endPoint: .trailing
                                        )
                                    )
                            )
                        }
                    }
                    .padding(.horizontal, 20)
                }
            }
        }
        .padding(.horizontal, 20)
        .padding(.top, 8)
    }
    
    // MARK: - Workout Overview
    private var workoutOverview: some View {
        HStack(spacing: 0) {
            OverviewItem(
                title: "Duration",
                value: workout.durationText,
                icon: "clock.fill"
            )
            
            Divider()
                .frame(height: 40)
                .foregroundColor(Color.gray.opacity(0.3))
            
            OverviewItem(
                title: "Difficulty",
                value: workout.difficultyText,
                icon: "flame.fill"
            )
            
            Divider()
                .frame(height: 40)
                .foregroundColor(Color.gray.opacity(0.3))
            
            OverviewItem(
                title: "Exercises",
                value: "\(workout.exercises.count)",
                icon: "list.bullet"
            )
        }
        .padding(.vertical, 20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(themeProvider.theme.backgroundSecondary)
                .shadow(color: Color.black.opacity(0.05), radius: 8, x: 0, y: 4)
        )
        .padding(.horizontal, 20)
    }
    
    // MARK: - AI Notes Section
    private var aiNotesSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Image(systemName: "lightbulb.fill")
                    .foregroundColor(themeProvider.theme.accent)
                Text("AI Coach Notes")
                    .font(.system(size: 18, weight: .semibold))
                    .foregroundColor(themeProvider.theme.textPrimary)
                Spacer()
            }
            
            Text(workout.aiNotes)
                .font(.system(size: 14, weight: .medium))
                .foregroundColor(themeProvider.theme.textSecondary)
                .padding(16)
                .background(
                    RoundedRectangle(cornerRadius: 12)
                        .fill(themeProvider.theme.accent.opacity(0.05))
                        .overlay(
                            RoundedRectangle(cornerRadius: 12)
                                .stroke(themeProvider.theme.accent.opacity(0.2), lineWidth: 1)
                        )
                )
        }
        .padding(.horizontal, 20)
    }
    
    // MARK: - Exercises List
    private var exercisesList: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                Text("Exercises")
                    .font(.system(size: 24, weight: .bold))
                    .foregroundColor(themeProvider.theme.textPrimary)
                
                Spacer()
                
                Text("\(completedExercises.count)/\(workout.exercises.count)")
                    .font(.system(size: 14, weight: .semibold))
                    .foregroundColor(themeProvider.theme.accent)
                    .padding(.horizontal, 8)
                    .padding(.vertical, 4)
                    .background(
                        Capsule()
                            .fill(themeProvider.theme.accent.opacity(0.1))
                    )
            }
            .padding(.horizontal, 20)
            
            LazyVStack(spacing: 12) {
                ForEach(Array(workout.exercises.enumerated()), id: \.offset) { index, exercise in
                    AIExerciseCard(
                        exercise: exercise,
                        index: index + 1,
                        isCompleted: completedExercises.contains(exercise.id)
                    ) {
                        toggleExerciseCompletion(exercise.id)
                    }
                }
            }
            .padding(.horizontal, 20)
        }
    }
    
    // MARK: - Mark Completed Button
    private var markCompletedButton: some View {
        VStack(spacing: 12) {
            if completedExercises.count == workout.exercises.count {
                Button {
                    Task {
                        await logWorkoutCompletion()
                    }
                } label: {
                    HStack {
                        Image(systemName: "checkmark.circle.fill")
                        Text("Mark Workout Complete")
                            .font(.system(size: 16, weight: .semibold))
                    }
                    .foregroundColor(.white)
                    .frame(maxWidth: .infinity)
                    .padding(.vertical, 16)
                    .background(
                        LinearGradient(
                            colors: [Color.green, Color.green.opacity(0.8)],
                            startPoint: .topLeading,
                            endPoint: .bottomTrailing
                        )
                    )
                    .clipShape(RoundedRectangle(cornerRadius: 12))
                    .shadow(color: Color.green.opacity(0.3), radius: 8, x: 0, y: 4)
                }
            } else {
                VStack(spacing: 8) {
                    Text("Complete all exercises to log this workout")
                        .font(.system(size: 14, weight: .medium))
                        .foregroundColor(themeProvider.theme.textSecondary)
                        .multilineTextAlignment(.center)
                    
                    Text("\(completedExercises.count)/\(workout.exercises.count) exercises completed")
                        .font(.system(size: 12, weight: .medium))
                        .foregroundColor(themeProvider.theme.accent)
                }
                .padding(.vertical, 12)
            }
        }
        .padding(.horizontal, 20)
    }
    
    // MARK: - Helper Functions
    private func toggleExerciseCompletion(_ exerciseId: String) {
        if completedExercises.contains(exerciseId) {
            completedExercises.remove(exerciseId)
        } else {
            completedExercises.insert(exerciseId)
        }
    }
    
    private func muscleGroupIcon(_ group: String) -> String {
        switch group.lowercased() {
        case "chest": return "heart.fill"
        case "back": return "figure.strengthtraining.traditional"
        case "shoulders": return "figure.arms.open"
        case "biceps", "triceps": return "arm.and.ellipsis.circle.fill"
        case "abs", "obliques": return "figure.core.training"
        case "glutes": return "figure.strengthtraining.functional"
        case "quadriceps", "hamstrings": return "figure.walk"
        case "calves": return "figure.run"
        case "cardio": return "heart.circle.fill"
        case "full_body": return "figure.strengthtraining.traditional"
        default: return "dumbbell.fill"
        }
    }
    
    private func logWorkoutCompletion() async {
        let completedExercises = workout.exercises.compactMap { exercise -> WorkoutSessionService.CompletedExercise? in
            guard completedExercises.contains(exercise.id) else { return nil }
            return WorkoutSessionService.CompletedExercise(
                name: exercise.displayName,
                sets: exercise.sets,
                reps: exercise.reps,
                weight: exercise.equipment,
                notes: nil
            )
        }
        
        let success = await WorkoutSessionService.shared.logAIWorkoutCompletion(
            workoutPlan: workout,
            duration: workout.estimated_duration,
            completedExercises: completedExercises,
            notes: nil
        )
        
        if success {
            dismiss()
        }
    }
    
    private func generateWorkoutText() -> String {
        var text = "🏋️‍♂️ \(workout.displayTitle)\n\n"
        text += "📝 \(workout.displayDescription)\n\n"
        text += "💪 Muscle Groups: \(workout.muscleGroupsText)\n"
        text += "⏱️ Duration: \(workout.durationText)\n"
        text += "🔥 Difficulty: \(workout.difficultyText)\n\n"
        
        if !workout.aiNotes.isEmpty {
            text += "💡 AI Coach Notes:\n\(workout.aiNotes)\n\n"
        }
        
        text += "📋 Exercises:\n"
        
        for (index, exercise) in workout.exercises.enumerated() {
            text += "\n\(index + 1). \(exercise.displayName)\n"
            text += "   \(exercise.setsRepsText) | \(exercise.restTimeText)\n"
            text += "   Equipment: \(exercise.equipmentText)\n"
            if !exercise.displayDescription.isEmpty {
                text += "   📖 \(exercise.displayDescription)\n"
            }
            if !exercise.instructions.isEmpty {
                text += "   📋 Instructions:\n"
                text += "      \(exercise.instructions)\n"
            }
        }
        
        text += "\n\n✨ Generated by Grok AI via Fitflow"
        return text
    }
}

// MARK: - Markdown Helper
func markdown(_ text: String) -> AttributedString {
    if let attributed = try? AttributedString(markdown: text) {
        return attributed
    }
    return AttributedString(text)
}

// MARK: - AI Exercise Card

struct AIExerciseCard: View {
    let exercise: ExerciseResponse
    let index: Int
    let isCompleted: Bool
    let onToggle: () -> Void
    @EnvironmentObject var themeProvider: ThemeProvider
    @State private var isExpanded = false
    
    var body: some View {
        exerciseCard
    }
    
    private var exerciseCard: some View {
        VStack(spacing: 0) {
            mainExerciseRow
            if isExpanded {
                expandedContent
            }
        }
    }
    
    private var mainExerciseRow: some View {
        HStack(spacing: 16) {
            exerciseButton
            exerciseDetails
        }
        .padding(16)
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(themeProvider.theme.cardBackground)
                .stroke(
                    isCompleted ? Color.green.opacity(0.3) : Color.gray.opacity(0.2),
                    lineWidth: 1
                )
        )
        .opacity(isCompleted ? 0.7 : 1.0)
        .animation(.spring(response: 0.3, dampingFraction: 0.7), value: isCompleted)
    }
    
    private var exerciseButton: some View {
        Button(action: onToggle) {
            ZStack {
                let fillColor = isCompleted ? Color.green : themeProvider.theme.accent.opacity(0.1)
                Circle()
                    .fill(fillColor)
                    .frame(width: 36, height: 36)
                
                if isCompleted {
                    Image(systemName: "checkmark")
                        .font(.system(size: 16, weight: .bold))
                        .foregroundColor(.white)
                } else {
                    Text("\(index)")
                        .font(.system(size: 16, weight: .bold))
                        .foregroundColor(themeProvider.theme.accent)
                }
            }
        }
    }
    
    private var exerciseDetails: some View {
        VStack(alignment: .leading, spacing: 8) {
            HStack {
                Text(exercise.displayName)
                    .font(.system(size: 18, weight: .semibold))
                    .foregroundColor(themeProvider.theme.textPrimary)
                    .strikethrough(isCompleted)
                
                Spacer()
                
                Button {
                    withAnimation(.easeInOut(duration: 0.3)) {
                        isExpanded.toggle()
                    }
                } label: {
                    Image(systemName: isExpanded ? "chevron.up" : "chevron.down")
                        .font(.system(size: 12, weight: .medium))
                        .foregroundColor(themeProvider.theme.textSecondary)
                }
            }
            
            HStack(spacing: 16) {
                if let sets = exercise.sets {
                    ExerciseDetail(label: "Sets", value: "\(sets)")
                }
                if let reps = exercise.reps {
                    ExerciseDetail(label: "Reps", value: reps)
                }
                if let restSeconds = exercise.rest_seconds {
                    ExerciseDetail(label: "Rest", value: "\(restSeconds)s")
                }
            }
        }
    }
    
    private var expandedContent: some View {
        VStack(alignment: .leading, spacing: 12) {
            Divider()
                .padding(.horizontal, 16)
            
            VStack(alignment: .leading, spacing: 8) {
                Text("Instructions")
                    .font(.system(size: 14, weight: .semibold))
                    .foregroundColor(themeProvider.theme.textPrimary)
                
                Text(markdown(exercise.instructions))
                    .font(.system(size: 14))
                    .foregroundColor(themeProvider.theme.textSecondary)
                    .lineLimit(nil)
            }
            .padding(.horizontal, 16)
            .padding(.bottom, 16)
        }
    }
}


