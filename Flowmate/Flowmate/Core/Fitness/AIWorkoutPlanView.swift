//
//  AIWorkoutPlanView.swift
//  Flowmate
//
//  Created on 2025-01-13
//

import SwiftUI

struct AIWorkoutPlanView: View {
    let workout: WorkoutPlanResponse
    @EnvironmentObject var themeProvider: ThemeProvider
    @Environment(\.dismiss) private var dismiss
    @State private var completedExercises: Set<String> = []
    @State private var showShareSheet = false
    
    var body: some View {
        NavigationStack {
            ScrollView {
                VStack(spacing: 24) {
                    // Header
                    workoutHeader
                    
                    // Workout Overview
                    workoutOverview
                    
                    // AI Notes Section
                    if !workout.aiNotes.isEmpty {
                        aiNotesSection
                    }
                    
                    // Exercises
                    exercisesList
                    
                    // Action Buttons
                    actionButtons
                }
                .padding(.bottom, 100)
            }
            .background(ThemedBackground().environmentObject(themeProvider))
            .navigationTitle("AI Workout")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .topBarLeading) {
                    Button("Close") {
                        dismiss()
                    }
                    .foregroundColor(themeProvider.theme.accent)
                }
                
                ToolbarItem(placement: .topBarTrailing) {
                    Button {
                        showShareSheet = true
                    } label: {
                        Image(systemName: "square.and.arrow.up")
                            .foregroundColor(themeProvider.theme.accent)
                    }
                }
            }
        }
        .sheet(isPresented: $showShareSheet) {
            ShareSheet(items: [generateWorkoutText()])
        }
    }
    
    // MARK: - Workout Header
    private var workoutHeader: some View {
        VStack(spacing: 16) {
            // AI Badge
            HStack {
                Spacer()
                
                HStack(spacing: 6) {
                    Image(systemName: "sparkles")
                        .font(.system(size: 12, weight: .medium))
                    Text("Generated by Grok AI")
                        .font(.system(size: 12, weight: .semibold))
                }
                .foregroundColor(themeProvider.theme.accent)
                .padding(.horizontal, 12)
                .padding(.vertical, 6)
                .background(
                    Capsule()
                        .fill(themeProvider.theme.accent.opacity(0.1))
                        .overlay(
                            Capsule()
                                .stroke(themeProvider.theme.accent.opacity(0.3), lineWidth: 1)
                        )
                )
                
                Spacer()
            }
            
            // Title and Details
            VStack(spacing: 12) {
                Text(workout.displayTitle)
                    .font(.system(size: 32, weight: .bold, design: .rounded))
                    .foregroundColor(themeProvider.theme.textPrimary)
                    .multilineTextAlignment(.center)
                
                Text(workout.displayDescription)
                    .font(.system(size: 16, weight: .medium))
                    .foregroundColor(themeProvider.theme.textSecondary)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal)
                
                // Muscle Groups
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack(spacing: 8) {
                        ForEach(workout.target_muscle_groups, id: \.self) { group in
                            HStack(spacing: 4) {
                                Image(systemName: muscleGroupIcon(group))
                                    .font(.system(size: 12, weight: .medium))
                                Text(group.replacingOccurrences(of: "_", with: " ").capitalized)
                                    .font(.system(size: 12, weight: .semibold))
                            }
                            .foregroundColor(.white)
                            .padding(.horizontal, 10)
                            .padding(.vertical, 6)
                            .background(
                                Capsule()
                                    .fill(
                                        LinearGradient(
                                            colors: [themeProvider.theme.accent, themeProvider.theme.accent.opacity(0.8)],
                                            startPoint: .leading,
                                            endPoint: .trailing
                                        )
                                    )
                            )
                        }
                    }
                    .padding(.horizontal, 20)
                }
            }
        }
        .padding(.horizontal, 20)
        .padding(.top, 8)
    }
    
    // MARK: - Workout Overview
    private var workoutOverview: some View {
        HStack(spacing: 0) {
            OverviewItem(
                title: "Duration",
                value: workout.durationText,
                icon: "clock.fill"
            )
            
            Divider()
                .frame(height: 40)
                .foregroundColor(Color.gray.opacity(0.3))
            
            OverviewItem(
                title: "Difficulty",
                value: workout.difficultyText,
                icon: "flame.fill"
            )
            
            Divider()
                .frame(height: 40)
                .foregroundColor(Color.gray.opacity(0.3))
            
            OverviewItem(
                title: "Exercises",
                value: "\(workout.exercises.count)",
                icon: "list.bullet"
            )
        }
        .padding(.vertical, 20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(themeProvider.theme.backgroundSecondary)
                .shadow(color: Color.black.opacity(0.05), radius: 8, x: 0, y: 4)
        )
        .padding(.horizontal, 20)
    }
    
    // MARK: - AI Notes Section
    private var aiNotesSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Image(systemName: "lightbulb.fill")
                    .foregroundColor(themeProvider.theme.accent)
                Text("AI Coach Notes")
                    .font(.system(size: 18, weight: .semibold))
                    .foregroundColor(themeProvider.theme.textPrimary)
                Spacer()
            }
            
            Text(workout.aiNotes)
                .font(.system(size: 14, weight: .medium))
                .foregroundColor(themeProvider.theme.textSecondary)
                .padding(16)
                .background(
                    RoundedRectangle(cornerRadius: 12)
                        .fill(themeProvider.theme.accent.opacity(0.05))
                        .overlay(
                            RoundedRectangle(cornerRadius: 12)
                                .stroke(themeProvider.theme.accent.opacity(0.2), lineWidth: 1)
                        )
                )
        }
        .padding(.horizontal, 20)
    }
    
    // MARK: - Exercises List
    private var exercisesList: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                Text("Exercises")
                    .font(.system(size: 24, weight: .bold))
                    .foregroundColor(themeProvider.theme.textPrimary)
                
                Spacer()
                
                Text("\(completedExercises.count)/\(workout.exercises.count)")
                    .font(.system(size: 14, weight: .semibold))
                    .foregroundColor(themeProvider.theme.accent)
                    .padding(.horizontal, 8)
                    .padding(.vertical, 4)
                    .background(
                        Capsule()
                            .fill(themeProvider.theme.accent.opacity(0.1))
                    )
            }
            .padding(.horizontal, 20)
            
            LazyVStack(spacing: 12) {
                ForEach(Array(workout.exercises.enumerated()), id: \.offset) { index, exercise in
                    AIExerciseCard(
                        exercise: exercise,
                        index: index + 1,
                        isCompleted: completedExercises.contains(exercise.id)
                    ) {
                        toggleExerciseCompletion(exercise.id)
                    }
                }
            }
            .padding(.horizontal, 20)
        }
    }
    
    // MARK: - Action Buttons
    private var actionButtons: some View {
        VStack(spacing: 12) {
            // Start/Complete Workout Button
            Button {
                // Start workout action - could integrate with Apple Health
            } label: {
                HStack {
                    Image(systemName: completedExercises.count == workout.exercises.count ? "checkmark.circle.fill" : "play.fill")
                    Text(completedExercises.count == workout.exercises.count ? "Workout Complete!" : "Start Workout")
                        .font(.system(size: 16, weight: .semibold))
                }
                .foregroundColor(.white)
                .frame(maxWidth: .infinity)
                .padding(.vertical, 16)
                .background(
                    LinearGradient(
                        colors: completedExercises.count == workout.exercises.count ? 
                            [Color.green, Color.green.opacity(0.8)] :
                            [themeProvider.theme.accent, themeProvider.theme.accent.opacity(0.8)],
                        startPoint: .topLeading,
                        endPoint: .bottomTrailing
                    )
                )
                .clipShape(RoundedRectangle(cornerRadius: 12))
                .shadow(color: themeProvider.theme.accent.opacity(0.3), radius: 8, x: 0, y: 4)
            }
            
            // Save Workout Button
            Button {
                // Save workout to user's collection
                HapticFeedback.success()
                dismiss()
            } label: {
                HStack {
                    Image(systemName: "bookmark.fill")
                    Text("Save to My Workouts")
                        .font(.system(size: 16, weight: .medium))
                }
                .foregroundColor(themeProvider.theme.accent)
                .frame(maxWidth: .infinity)
                .padding(.vertical, 14)
                .background(
                    RoundedRectangle(cornerRadius: 12)
                        .stroke(themeProvider.theme.accent, lineWidth: 2)
                        .fill(themeProvider.theme.accent.opacity(0.05))
                )
            }
        }
        .padding(.horizontal, 20)
    }
    
    // MARK: - Helper Functions
    private func toggleExerciseCompletion(_ exerciseId: String) {
        if completedExercises.contains(exerciseId) {
            completedExercises.remove(exerciseId)
        } else {
            completedExercises.insert(exerciseId)
        }
    }
    
    private func muscleGroupIcon(_ group: String) -> String {
        switch group.lowercased() {
        case "chest": return "heart.fill"
        case "back": return "figure.strengthtraining.traditional"
        case "shoulders": return "figure.arms.open"
        case "biceps", "triceps": return "arm.and.ellipsis.circle.fill"
        case "abs", "obliques": return "figure.core.training"
        case "glutes": return "figure.strengthtraining.functional"
        case "quadriceps", "hamstrings": return "figure.walk"
        case "calves": return "figure.run"
        case "cardio": return "heart.circle.fill"
        case "full_body": return "figure.strengthtraining.traditional"
        default: return "dumbbell.fill"
        }
    }
    
    private func generateWorkoutText() -> String {
        var text = "🏋️‍♂️ \(workout.displayTitle)\n\n"
        text += "📝 \(workout.displayDescription)\n\n"
        text += "💪 Muscle Groups: \(workout.muscleGroupsText)\n"
        text += "⏱️ Duration: \(workout.durationText)\n"
        text += "🔥 Difficulty: \(workout.difficultyText)\n\n"
        
        if !workout.aiNotes.isEmpty {
            text += "💡 AI Coach Notes:\n\(workout.aiNotes)\n\n"
        }
        
        text += "📋 Exercises:\n"
        
        for (index, exercise) in workout.exercises.enumerated() {
            text += "\n\(index + 1). \(exercise.displayName)\n"
            text += "   \(exercise.setsRepsText) | Rest: \(exercise.restText)\n"
            text += "   Equipment: \(exercise.equipmentText)\n"
            if !exercise.description.isEmpty {
                text += "   📖 \(exercise.description)\n"
            }
            if !exercise.instructions.isEmpty {
                text += "   📋 Instructions:\n"
                for instruction in exercise.instructions {
                    text += "      • \(instruction)\n"
                }
            }
            if !exercise.tips.isEmpty {
                text += "   💡 Tips:\n"
                for tip in exercise.tips {
                    text += "      • \(tip)\n"
                }
            }
        }
        
        text += "\n\n✨ Generated by Grok AI via Fitflow"
        return text
    }
}

// MARK: - AI Exercise Card

struct AIExerciseCard: View {
    let exercise: ExerciseResponse
    let index: Int
    let isCompleted: Bool
    let onToggle: () -> Void
    @EnvironmentObject var themeProvider: ThemeProvider
    @State private var isExpanded = false
    
    var body: some View {
        VStack(spacing: 0) {
            // Main Exercise Card
            HStack(spacing: 16) {
                // Exercise Number/Checkmark
                Button(action: onToggle) {
                    ZStack {
                        Circle()
                            .fill(isCompleted ? Color.green : themeProvider.theme.accent.opacity(0.1))
                            .frame(width: 36, height: 36)
                        
                        if isCompleted {
                            Image(systemName: "checkmark")
                                .font(.system(size: 16, weight: .bold))
                                .foregroundColor(.white)
                        } else {
                            Text("\(index)")
                                .font(.system(size: 16, weight: .bold))
                                .foregroundColor(themeProvider.theme.accent)
                        }
                    }
                }
                
                // Exercise Details
                VStack(alignment: .leading, spacing: 8) {
                    HStack {
                        Text(exercise.displayName)
                            .font(.system(size: 18, weight: .semibold))
                            .foregroundColor(themeProvider.theme.textPrimary)
                            .strikethrough(isCompleted)
                        
                        Spacer()
                        
                        Button {
                            withAnimation(.easeInOut(duration: 0.3)) {
                                isExpanded.toggle()
                            }
                        } label: {
                            Image(systemName: isExpanded ? "chevron.up" : "chevron.down")
                                .font(.system(size: 12, weight: .medium))
                                .foregroundColor(themeProvider.theme.textSecondary)
                        }
                    }
                    
                    HStack(spacing: 16) {
                        if let sets = exercise.sets {
                            ExerciseDetail(label: "Sets", value: "\(sets)")
                        }
                        if let reps = exercise.reps {
                            ExerciseDetail(label: "Reps", value: reps)
                        }
                        ExerciseDetail(label: "Rest", value: exercise.restText)
                        ExerciseDetail(label: "Equipment", value: exercise.equipmentText)
                    }
                }
            }
            .padding(16)
            
            // Expandable Details
            if isExpanded {
                VStack(alignment: .leading, spacing: 12) {
                    Divider()
                        .padding(.horizontal, 16)
                    
                    VStack(alignment: .leading, spacing: 8) {
                        if !exercise.description.isEmpty {
                            VStack(alignment: .leading, spacing: 4) {
                                Text("Description")
                                    .font(.system(size: 14, weight: .semibold))
                                    .foregroundColor(themeProvider.theme.accent)
                                Text(exercise.description)
                                    .font(.system(size: 13, weight: .medium))
                                    .foregroundColor(themeProvider.theme.textSecondary)
                            }
                        }
                        
                        if !exercise.instructions.isEmpty {
                            VStack(alignment: .leading, spacing: 4) {
                                Text("Instructions")
                                    .font(.system(size: 14, weight: .semibold))
                                    .foregroundColor(themeProvider.theme.accent)
                                ForEach(Array(exercise.instructions.enumerated()), id: \.offset) { _, instruction in
                                    HStack(alignment: .top, spacing: 6) {
                                        Text("•")
                                            .foregroundColor(themeProvider.theme.accent)
                                        Text(instruction)
                                            .font(.system(size: 13, weight: .medium))
                                            .foregroundColor(themeProvider.theme.textSecondary)
                                    }
                                }
                            }
                        }
                        
                        if !exercise.tips.isEmpty {
                            VStack(alignment: .leading, spacing: 4) {
                                Text("Tips")
                                    .font(.system(size: 14, weight: .semibold))
                                    .foregroundColor(themeProvider.theme.accent)
                                ForEach(Array(exercise.tips.enumerated()), id: \.offset) { _, tip in
                                    HStack(alignment: .top, spacing: 6) {
                                        Text("💡")
                                            .font(.system(size: 11))
                                        Text(tip)
                                            .font(.system(size: 13, weight: .medium))
                                            .foregroundColor(themeProvider.theme.textSecondary)
                                    }
                                }
                            }
                        }
                    }
                    .padding(.horizontal, 16)
                    .padding(.bottom, 16)
                }
            }
        }
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(themeProvider.theme.backgroundSecondary)
                .overlay(
                    RoundedRectangle(cornerRadius: 12)
                        .stroke(
                            isCompleted ? Color.green.opacity(0.3) : Color.gray.opacity(0.2),
                            lineWidth: 1
                        )
                )
                .opacity(isCompleted ? 0.7 : 1.0)
        )
        .animation(.spring(response: 0.3, dampingFraction: 0.7), value: isCompleted)
    }
}

#Preview {
    AIWorkoutPlanView(
        workout: WorkoutPlanResponse(
            id: "1234",
            user_id: "user123",
            title: "AI Generated Push Day",
            description: "A comprehensive upper body push workout targeting chest, shoulders, and triceps",
            difficulty_level: "intermediate", 
            estimated_duration: 45,
            target_muscle_groups: ["chest", "shoulders", "triceps"],
            equipment: ["barbell", "dumbbells"],
            exercises: [
                ExerciseResponse(
                    id: "ex1",
                    name: "Barbell Bench Press",
                    description: "Compound movement for chest development",
                    muscle_groups: ["chest", "triceps"],
                    equipment: "barbell",
                    sets: 4,
                    reps: "8-10",
                    weight: nil,
                    rest_time: 120,
                    instructions: ["Lie flat on bench", "Grip bar slightly wider than shoulders", "Lower bar to chest", "Press up explosively"],
                    tips: ["Keep feet planted", "Maintain tight core", "Control the descent"],
                    modifications: [],
                    video_url: nil,
                    image_url: nil
                )
            ],
            ai_generated_notes: "Focus on controlled movement and progressive overload. Rest adequately between sets.",
            created_at: "2025-01-13T12:00:00Z",
            updated_at: "2025-01-13T12:00:00Z"
        )
    )
    .environmentObject(ThemeProvider())
}
