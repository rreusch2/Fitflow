//
//  WorkoutPlanView.swift
//  Flowmate
//
//  Created on 2025-01-13
//

import SwiftUI

struct WorkoutPlanView: View {
    let workout: AIWorkoutPlan
    @EnvironmentObject var themeProvider: ThemeProvider
    @Environment(\.dismiss) private var dismiss
    @State private var completedExercises: Set<String> = []
    @State private var showShareSheet = false
    
    var body: some View {
        NavigationStack {
            ScrollView {
                VStack(spacing: 24) {
                    // Header
                    workoutHeader
                    
                    // Workout Overview
                    workoutOverview
                    
                    // Exercises
                    exercisesList
                    
                    // Action Buttons
                    actionButtons
                }
                .padding(.bottom, 100)
            }
            .background(ThemedBackground().environmentObject(themeProvider))
            .navigationTitle("AI Workout")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .topBarLeading) {
                    Button("Close") {
                        dismiss()
                    }
                    .foregroundColor(themeProvider.theme.accent)
                }
                
                ToolbarItem(placement: .topBarTrailing) {
                    Button {
                        showShareSheet = true
                    } label: {
                        Image(systemName: "square.and.arrow.up")
                            .foregroundColor(themeProvider.theme.accent)
                    }
                }
            }
        }
        .sheet(isPresented: $showShareSheet) {
            ShareSheet(items: [generateWorkoutText()])
        }
    }
    
    // MARK: - Workout Header
    private var workoutHeader: some View {
        VStack(spacing: 16) {
            // AI Badge
            HStack {
                Spacer()
                
                HStack(spacing: 6) {
                    Image(systemName: "sparkles")
                        .font(.system(size: 12, weight: .medium))
                    Text("Generated by AI")
                        .font(.system(size: 12, weight: .semibold))
                }
                .foregroundColor(themeProvider.theme.accent)
                .padding(.horizontal, 12)
                .padding(.vertical, 6)
                .background(
                    Capsule()
                        .fill(themeProvider.theme.accent.opacity(0.1))
                        .overlay(
                            Capsule()
                                .stroke(themeProvider.theme.accent.opacity(0.3), lineWidth: 1)
                        )
                )
                
                Spacer()
            }
            
            // Title and Details
            VStack(spacing: 12) {
                Text(workout.title)
                    .font(.system(size: 32, weight: .bold, design: .rounded))
                    .foregroundColor(themeProvider.theme.textPrimary)
                    .multilineTextAlignment(.center)
                
                // Muscle Groups
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack(spacing: 8) {
                        ForEach(workout.muscleGroups, id: \.self) { group in
                            HStack(spacing: 4) {
                                Image(systemName: group.icon)
                                    .font(.system(size: 12, weight: .medium))
                                Text(group.displayName)
                                    .font(.system(size: 12, weight: .semibold))
                            }
                            .foregroundColor(.white)
                            .padding(.horizontal, 10)
                            .padding(.vertical, 6)
                            .background(
                                Capsule()
                                    .fill(
                                        LinearGradient(
                                            colors: [themeProvider.theme.accent, themeProvider.theme.accent.opacity(0.8)],
                                            startPoint: .leading,
                                            endPoint: .trailing
                                        )
                                    )
                            )
                        }
                    }
                    .padding(.horizontal, 20)
                }
            }
        }
        .padding(.horizontal, 20)
        .padding(.top, 8)
    }
    
    // MARK: - Workout Overview
    private var workoutOverview: some View {
        HStack(spacing: 0) {
            OverviewItem(
                title: "Duration",
                value: workout.duration.displayName,
                icon: "clock.fill"
            )
            
            Divider()
                .frame(height: 40)
                .foregroundColor(Color.gray.opacity(0.3))
            
            OverviewItem(
                title: "Difficulty",
                value: workout.difficulty.displayName,
                icon: "flame.fill"
            )
            
            Divider()
                .frame(height: 40)
                .foregroundColor(Color.gray.opacity(0.3))
            
            OverviewItem(
                title: "Exercises",
                value: "\(workout.exercises.count)",
                icon: "list.bullet"
            )
        }
        .padding(.vertical, 20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(themeProvider.theme.backgroundSecondary)
                .shadow(color: Color.black.opacity(0.05), radius: 8, x: 0, y: 4)
        )
        .padding(.horizontal, 20)
    }
    
    // MARK: - Exercises List
    private var exercisesList: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                Text("Exercises")
                    .font(.system(size: 24, weight: .bold))
                    .foregroundColor(themeProvider.theme.textPrimary)
                
                Spacer()
                
                Text("\(completedExercises.count)/\(workout.exercises.count)")
                    .font(.system(size: 14, weight: .semibold))
                    .foregroundColor(themeProvider.theme.accent)
                    .padding(.horizontal, 8)
                    .padding(.vertical, 4)
                    .background(
                        Capsule()
                            .fill(themeProvider.theme.accent.opacity(0.1))
                    )
            }
            .padding(.horizontal, 20)
            
            LazyVStack(spacing: 12) {
                ForEach(Array(workout.exercises.enumerated()), id: \.offset) { index, exercise in
                    ExerciseCard(
                        exercise: exercise,
                        index: index + 1,
                        isCompleted: completedExercises.contains(exercise.name)
                    ) {
                        toggleExerciseCompletion(exercise.name)
                    }
                }
            }
            .padding(.horizontal, 20)
        }
    }
    
    // MARK: - Action Buttons
    private var actionButtons: some View {
        VStack(spacing: 12) {
            // Start/Complete Workout Button
            Button {
                // Start workout action
            } label: {
                HStack {
                    Image(systemName: completedExercises.count == workout.exercises.count ? "checkmark.circle.fill" : "play.fill")
                    Text(completedExercises.count == workout.exercises.count ? "Workout Complete!" : "Start Workout")
                        .font(.system(size: 16, weight: .semibold))
                }
                .foregroundColor(.white)
                .frame(maxWidth: .infinity)
                .padding(.vertical, 16)
                .background(
                    LinearGradient(
                        colors: completedExercises.count == workout.exercises.count ? 
                            [Color.green, Color.green.opacity(0.8)] :
                            [themeProvider.theme.accent, themeProvider.theme.accent.opacity(0.8)],
                        startPoint: .topLeading,
                        endPoint: .bottomTrailing
                    )
                )
                .clipShape(RoundedRectangle(cornerRadius: 12))
                .shadow(color: themeProvider.theme.accent.opacity(0.3), radius: 8, x: 0, y: 4)
            }
            
            // Save Workout Button
            Button {
                FitnessProgressService.shared.logAIWorkout(workout)
                HapticFeedback.success()
                dismiss()
            } label: {
                HStack {
                    Image(systemName: "bookmark.fill")
                    Text("Save to My Workouts")
                        .font(.system(size: 16, weight: .medium))
                }
                .foregroundColor(themeProvider.theme.accent)
                .frame(maxWidth: .infinity)
                .padding(.vertical, 14)
                .background(
                    RoundedRectangle(cornerRadius: 12)
                        .stroke(themeProvider.theme.accent, lineWidth: 2)
                        .fill(themeProvider.theme.accent.opacity(0.05))
                )
            }
        }
        .padding(.horizontal, 20)
    }
    
    // MARK: - Helper Functions
    private func toggleExerciseCompletion(_ exerciseName: String) {
        if completedExercises.contains(exerciseName) {
            completedExercises.remove(exerciseName)
        } else {
            completedExercises.insert(exerciseName)
        }
    }
    
    private func generateWorkoutText() -> String {
        var text = "🏋️‍♂️ \(workout.title)\n\n"
        text += "💪 Muscle Groups: \(workout.muscleGroups.map { $0.displayName }.joined(separator: ", "))\n"
        text += "⏱️ Duration: \(workout.duration.displayName)\n"
        text += "🔥 Difficulty: \(workout.difficulty.displayName)\n\n"
        text += "📋 Exercises:\n"
        
        for (index, exercise) in workout.exercises.enumerated() {
            text += "\n\(index + 1). \(exercise.name)\n"
            text += "   Sets: \(exercise.sets) | Reps: \(exercise.reps) | Rest: \(exercise.rest)\n"
            if !exercise.notes.isEmpty {
                text += "   💡 \(exercise.notes)\n"
            }
        }
        
        text += "\n\n✨ Generated by Flowmate AI"
        return text
    }
}

// MARK: - Supporting Views

struct OverviewItem: View {
    let title: String
    let value: String
    let icon: String
    @EnvironmentObject var themeProvider: ThemeProvider
    
    var body: some View {
        VStack(spacing: 8) {
            Image(systemName: icon)
                .font(.system(size: 20, weight: .medium))
                .foregroundColor(themeProvider.theme.accent)
            
            VStack(spacing: 4) {
                Text(value)
                    .font(.system(size: 18, weight: .bold))
                    .foregroundColor(themeProvider.theme.textPrimary)
                
                Text(title)
                    .font(.system(size: 12, weight: .medium))
                    .foregroundColor(themeProvider.theme.textSecondary)
            }
        }
        .frame(maxWidth: .infinity)
    }
}

struct ExerciseCard: View {
    let exercise: AIExercise
    let index: Int
    let isCompleted: Bool
    let onToggle: () -> Void
    @EnvironmentObject var themeProvider: ThemeProvider
    
    var body: some View {
        HStack(spacing: 16) {
            // Exercise Number/Checkmark
            Button(action: onToggle) {
                ZStack {
                    Circle()
                        .fill(isCompleted ? Color.green : themeProvider.theme.accent.opacity(0.1))
                        .frame(width: 32, height: 32)
                    
                    if isCompleted {
                        Image(systemName: "checkmark")
                            .font(.system(size: 14, weight: .bold))
                            .foregroundColor(.white)
                    } else {
                        Text("\(index)")
                            .font(.system(size: 14, weight: .bold))
                            .foregroundColor(themeProvider.theme.accent)
                    }
                }
            }
            
            // Exercise Details
            VStack(alignment: .leading, spacing: 8) {
                Text(exercise.name)
                    .font(.system(size: 18, weight: .semibold))
                    .foregroundColor(themeProvider.theme.textPrimary)
                    .strikethrough(isCompleted)
                
                HStack(spacing: 16) {
                    ExerciseDetail(label: "Sets", value: "\(exercise.sets)")
                    ExerciseDetail(label: "Reps", value: exercise.reps)
                    ExerciseDetail(label: "Rest", value: exercise.rest)
                }
                
                if !exercise.notes.isEmpty {
                    Text(exercise.notes)
                        .font(.system(size: 12, weight: .medium))
                        .foregroundColor(themeProvider.theme.textSecondary)
                        .padding(.horizontal, 8)
                        .padding(.vertical, 4)
                        .background(
                            RoundedRectangle(cornerRadius: 6)
                                .fill(themeProvider.theme.accent.opacity(0.1))
                        )
                }
            }
            
            Spacer()
        }
        .padding(16)
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(themeProvider.theme.backgroundSecondary)
                .overlay(
                    RoundedRectangle(cornerRadius: 12)
                        .stroke(
                            isCompleted ? Color.green.opacity(0.3) : Color.gray.opacity(0.2),
                            lineWidth: 1
                        )
                )
                .opacity(isCompleted ? 0.7 : 1.0)
        )
        .animation(.spring(response: 0.3, dampingFraction: 0.7), value: isCompleted)
    }
}

struct ExerciseDetail: View {
    let label: String
    let value: String
    @EnvironmentObject var themeProvider: ThemeProvider
    
    var body: some View {
        VStack(spacing: 2) {
            Text(label)
                .font(.system(size: 10, weight: .medium))
                .foregroundColor(themeProvider.theme.textSecondary)
            
            Text(value)
                .font(.system(size: 12, weight: .semibold))
                .foregroundColor(themeProvider.theme.textPrimary)
        }
    }
}

struct ShareSheet: UIViewControllerRepresentable {
    let items: [Any]
    
    func makeUIViewController(context: Context) -> UIActivityViewController {
        UIActivityViewController(activityItems: items, applicationActivities: nil)
    }
    
    func updateUIViewController(_ uiViewController: UIActivityViewController, context: Context) {}
}

#Preview {
    WorkoutPlanView(
        workout: AIWorkoutPlan(
            title: "Leg Day Strength",
            muscleGroups: [MuscleGroup.quadriceps, MuscleGroup.glutes],
            duration: AIWorkoutDuration.medium,
            difficulty: DifficultyLevel.intermediate,
            exercises: [
                AIExercise(name: "Barbell Squats", sets: 4, reps: "8-10", rest: "2-3 min", notes: "Focus on depth and control"),
                AIExercise(name: "Romanian Deadlifts", sets: 3, reps: "10-12", rest: "2 min", notes: "Keep bar close to body"),
                AIExercise(name: "Bulgarian Split Squats", sets: 3, reps: "8 each leg", rest: "90 sec", notes: "Control the descent"),
                AIExercise(name: "Calf Raises", sets: 4, reps: "15-20", rest: "1 min", notes: "Full range of motion")
            ]
        )
    )
    .environmentObject(ThemeProvider())
}
